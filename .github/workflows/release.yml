name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  BuildDEB:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev

      - name: Set Version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create builder container
        run: |
          # 创建一个支持多架构的构建容器
          docker buildx create --name multiarch-builder --driver docker-container --use
          docker buildx inspect --bootstrap

      - name: Build binaries and packages
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p build

          # 构建所有架构的二进制文件
          echo "Building binaries for all architectures..."
          # Linux amd64
          GOOS=linux GOARCH=amd64 go build -o build/auto-tunnel-linux-amd64 cmd/tunnel/main.go
          # Linux arm64
          GOOS=linux GOARCH=arm64 go build -o build/auto-tunnel-linux-arm64 cmd/tunnel/main.go
          # Darwin (macOS) amd64
          GOOS=darwin GOARCH=amd64 go build -o build/auto-tunnel-darwin-amd64 cmd/tunnel/main.go
          # Darwin (macOS) arm64
          GOOS=darwin GOARCH=arm64 go build -o build/auto-tunnel-darwin-arm64 cmd/tunnel/main.go

          # 构建所有架构的DEB包
          echo "Building DEB packages for all architectures..."
          # Build amd64 DEB package
          make build-deb PACKAGE_VERSION=$VERSION ARCH=amd64
          # Build arm64 DEB package
          make build-deb PACKAGE_VERSION=$VERSION ARCH=arm64

          # 构建所有架构的tarball
          echo "Building tarballs for all architectures..."
          make build-tarball PACKAGE_VERSION=$VERSION ARCH=amd64
          make build-tarball PACKAGE_VERSION=$VERSION ARCH=arm64

          # 列出构建的文件
          echo "Built files:"
          ls -la build/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            build/auto-tunnel-linux-amd64
            build/auto-tunnel-linux-arm64
            build/auto-tunnel-darwin-amd64
            build/auto-tunnel-darwin-arm64
            build/*.deb
            build/*.tar.gz

  BuildRPM:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    container:
      image: rockylinux:9
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Install dependencies
        run: |
          dnf install -y rpm-build make golang git gcc rpmdevtools qemu-user-static
          dnf group install -y "Development Tools"
          # 为 ARM64 架构安装额外的依赖
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            dnf install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          fi

      - name: Set Version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build RPM packages
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p build

          # 设置正确的工作目录权限
          chmod -R 777 .

          # 构建 RPM 包
          echo "Building ${{ matrix.arch }} RPM package..."
          make build-rpm PACKAGE_VERSION=$VERSION ARCH=${{ matrix.arch }} BUILD_DIR=$PWD/build

          # 创建 RPM 输出目录
          mkdir -p build/rpms
          # 查找并移动所有 RPM 文件到输出目录
          find . -name "*.rpm" -exec cp {} build/rpms/ \;

          echo "Built RPM packages:"
          ls -la build/rpms/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rpm-packages-${{ matrix.arch }}
          path: build/rpms/*.rpm

  CreateRelease:
    needs: [BuildDEB, BuildRPM]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          cp artifacts/packages/* release/ || true
          cp artifacts/rpm-packages-*/* release/ || true
          echo "Release files contents:"
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  DockerImage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            autotunnel/autotunnel:latest
            autotunnel/autotunnel:${{ github.ref_name }}
